#Wed Apr 22 16:55:59 CEST 2015
CapabilityStep.activation.tooltip.attributeName=Name of the attribute that contains a value for simulated administrativeStatus. This is usually an attribute that contains some kind of enabled/disabled information. Typical examples are attributes such as "enabled", "ds-pwp-account-disabled", "accountStatus", etc.
CapabilityStep.activation.tooltip.disableList=List of attribute values that represent the "disabled" state. If any of these values are present in the attribute then the object will be considered to be disabled. Typical values are "false", "disabled", "0" or empty value.
CapabilityStep.activation.tooltip.enableList=List of attribute values that represent the "enabled" state. If any of these values are present in the attribute then the object will be considered to be enabled. Typical values are "true", "ENABLED", "1" and so on.
CapabilityStep.activation.tooltip.enabled=True if this capability is active. False if it is disabled. Disabled capability acts in the same way as if it was not there. Capabilities can be disabled e.g. to work around connector bugs, to make resource read-only, etc.
CapabilityStep.activation.tooltip.ignoreAttribute=If set to true then the attribute which is used for simulated activation will be mark as ignored in the schema. I.e. midPoint will pretend that this attribute does not exist and only use the standard administrativeStatus. This is the default. If set to false then the attribute will also be visible in the schema and both the administrativeStatus and the original attribute will work. This may be needed if the attribute has a richer set of states than the administrativeStatus attribute. But in this case beware of value conflicts between administrativeStatus and the original attribute.
CapabilityStep.activation.tooltip.returnedByDefault=If true then the activation attribute is returned with resource objects by default and it does not need to be requested. If false then the activation attribute has to be explicitly requested.
CapabilityStep.activation.tooltip.validFromEnabled=True if the resource supports validFrom activation property.
CapabilityStep.activation.tooltip.validFromReturned=True of the validFrom property is returned by default. False if it needs to be explicitly requested.
CapabilityStep.activation.tooltip.validToEnabled=True if the resource supports validTo activation property
CapabilityStep.activation.tooltip.validToReturned=True of the validFrom property is returned by default. False if it needs to be explicitly requested.
CapabilityStep.capability.activation.tooltip=Activation capability. Ability to enable/disable accounts, set validity dates, etc.
CapabilityStep.capability.create.tooltip=Capability to create (add) new objects on resource.
CapabilityStep.capability.credentials.tooltip=Capability to set credentials for resource accounts.
CapabilityStep.capability.delete.tooltip=Capability to delete existing objects on resource.
CapabilityStep.capability.liveSync.tooltip=Live synchronization capability. Ability to efficiently fetch data changes in almost-real-time.
CapabilityStep.capability.read.tooltip=Capability to read data from the resource.
CapabilityStep.capability.script.tooltip=Capability to execute scripts on connector and resource.
CapabilityStep.capability.testConnection.tooltip=Capability to test connection to the resource.
CapabilityStep.capability.update.tooltip=Capability to update (modify) existing objects on resource.
CapabilityStep.credentials.tooltip.enabled=True if this capability is active. False if it is disabled. Disabled capability acts in the same way as if it was not there. Capabilities can be disabled e.g. to work around connector bugs, to make resource read-only, etc.
CapabilityStep.credentials.tooltip.passEnabled=True if the resource supports password credentials.
CapabilityStep.credentials.tooltip.passReturned=True of the password is returned by default. False if it needs to be explicitly requested.
CapabilityStep.script.tooltip.enabled=True if this capability is active. False if it is disabled. Disabled capability acts in the same way as if it was not there. Capabilities can be disabled e.g. to work around connector bugs, to make resource read-only, etc.
CapabilityStep.script.tooltip.onConnector=Capability to execute scripts "on connector". This means that the scripts will be executed on the machine where the connector is installed. This is usually midPoint node or a connector server.
CapabilityStep.script.tooltip.onResource=Capability to execute scripts "on resource". This means that the scripts will be executed on the machine where the connector connects. This is usually the server that hosts the resource (AD server, remote Unix machine, database server, etc.)
QNameEditor.tooltip.attribute=TODO\: QNameEditor.tooltip.attribute
QNameEditor.tooltip.namespace=TODO\: QNameEditor.tooltip.namespace
ResourceWizard.expression.tooltip.expression=The XML representation of the expression. This is the actual expression code that will be interpreted.
ResourceWizard.expression.tooltip.language=Programming language in which is the expression script written.
ResourceWizard.expression.tooltip.policyRef=Reference to a value policy object. The specified value policy will be used as a template to generate a value.
ResourceWizard.expression.tooltip.type=The type of expression. This specifies whether the expression is a script, value generator or something else.
SchemaHandlingStep.activation.tooltip.fetchStrategy=How to fetch the attribute when it is needed. Implicit\: the attribute is returned by default, it does not need to be requested; Explicit\: the attribute is not returned by default, always request it explicitly.
SchemaHandlingStep.activation.tooltip.inbound=Inbound mappings map values from the resource (usually an account) to the midPoint (usually a user).
SchemaHandlingStep.activation.tooltip.outbound=Outbound mappings map values from midPoint (usually a user) to the resource (usually an account).
SchemaHandlingStep.association.tooltip.associationAttribute=Name of the attribute that "holds" the association. I.e. an attribute which contains the identifier of the associated object. This is usually an attribute such as "memeber", "groups", "roles", etc. In subject-to-object associations this is an attribute of a subject (e.g. account attribute "groups"). In object-to-subject associations this is an attribute of an object (e.g. group attribute "members").
SchemaHandlingStep.association.tooltip.direction=Defines the direction of the association. Object-to-subject\: Object (e.g. group) has an attribute that contains identifier of the subject (e.g. account); Subject-to-object\: Subject (e.g. account) has an attribute that contains identifier of the object (e.g. group).
SchemaHandlingStep.association.tooltip.explicitRefIntegrity=Explicit referential integrity. If set to false then midPoint assumes that the resource implements referential integrity. E.g. midPoint assumes that the resource automatically updates the association identifiers if an account is renamed and midPoint does not need to do anything. If set to true then midPoint will do referential integrity explicitly. In this case midPoint will explicitly update the association attributes if an account is renamed.
SchemaHandlingStep.association.tooltip.intent=Intent of the association target object type. Target kind and intent identify an object type which is association target, e.g. a group, privilege, role, etc.
SchemaHandlingStep.association.tooltip.kind=Kind of the association target object type. This is usually "entitlement". Target kind and intent identify an object type which is association target, e.g. a group, privilege, role, etc.
SchemaHandlingStep.association.tooltip.valueAttribute=Name of the attribute that is the source of a value for the association. The value of this attribute will be taken and stored into the association attribute to form an association. This is usually an attribute that contains an identifier or name such as "uid", "id", "name", etc. In subject-to-object associations this is an attribute of an object (e.g. group). In object-to-subject associations this is an attribute of a subject (e.g. account).
SchemaHandlingStep.attribute.tooltip.allow=If checked allows to specify an attribute which is not in the original resource schema. This can be used to fix faulty connectors that do not provide a complete resource schema, which hides some attributes, etc.
SchemaHandlingStep.attribute.tooltip.exclusiveStrong=When set to false then both strong and normal mapping values are merged to produce the final set of values. When set to true only strong values are used if there is at least one strong mapping. Normal values are used if there is no strong mapping.
SchemaHandlingStep.attribute.tooltip.fetchStrategy=How to fetch the attribute when it is needed. Implicit\: the attribute is returned by default, it does not need to be requested; Explicit\: the attribute is not returned by default, always request it explicitly.
SchemaHandlingStep.attribute.tooltip.inbound=Inbound mappings map values from the resource (usually an account) to the midPoint (usually a user).
SchemaHandlingStep.attribute.tooltip.intolerantVP=A value that matches this pattern will NOT be tolerated. I.e. it will be erased from the attribute value even if it is not a result of midPoint processing (mappings).
SchemaHandlingStep.attribute.tooltip.limitations=Specify attribute limitations such as multiplicity, ability to read or write it, etc.
SchemaHandlingStep.attribute.tooltip.matchingRule=A rule that determines if two attribute values have the same meaning. E.g. setting this to 'stringIgnoreCase' will make this attribute efficiently case insensitive.
SchemaHandlingStep.attribute.tooltip.outbound=Outbound mappings map values from midPoint (usually a user) to the resource (usually an account).
SchemaHandlingStep.attribute.tooltip.reference=Name of the attribute to configure. All the settings and mappings below apply to this attribute.
SchemaHandlingStep.attribute.tooltip.tolerant=Tolerant attributes tolerate values that are set outside of midPoint. Non-tolerant attributes will only allow values that are defined in midPoint (e.g. by resource or role mappings).
SchemaHandlingStep.attribute.tooltip.tolerantVP=A value that matches this pattern will be tolerated. I.e. it will remain as the attribute value even if it is not a result of midPoint processing (mappings).
SchemaHandlingStep.credentials.tooltip.fetchStrategy=How to fetch the credentials value when it is needed. Implicit\: the value is returned by default, it does not need to be requested; Explicit\: the value is not returned by default, always request it explicitly.
SchemaHandlingStep.credentials.tooltip.inbound=Inbound mappings map values from the resource (usually an account) to the midPoint (usually a user).
SchemaHandlingStep.credentials.tooltip.outbound=Outbound mappings map values from midPoint (usually a user) to the resource (usually an account).
SchemaHandlingStep.credentials.tooltip.passwordPolicyRef=Password policy to apply to this credential. This setting overrides other settings, e.g. default password policy defined in system configuration. If no password policy is defined here then the usual default will be used.
SchemaHandlingStep.dependency.tooltip.intent=Intent of the object on which we depend.
SchemaHandlingStep.dependency.tooltip.kind=Kind of the object on which we depend.
SchemaHandlingStep.dependency.tooltip.order=Normally zero. Can specify an integer that determines the ordering of dependencies that form a cycle and could not be otherwise be resolved (a.k.a. high-order dependencies). 
SchemaHandlingStep.dependency.tooltip.resourceRef=Resource on which we depend.
SchemaHandlingStep.dependency.tooltip.strictness=Specifies how strictly will be the dependency resolved. Lax\: if the dependency is not there continue as normal (only used to impose operation ordering); Relaxed\: refuse to do operation unless the dependency is tried first, but if that fails then continue anyway; Strict\: proceed only is the dependency is tried first and it succeeds. 
SchemaHandlingStep.iteration.tooltip.maxIteration=Maximum number of iterations to try. The operation will end with a failure if the maximum number of iterations is tried without any success.
SchemaHandlingStep.iteration.tooltip.returnMultiplicity=TODO\: SchemaHandlingStep.iteration.tooltip.returnMultiplicity
SchemaHandlingStep.iteration.tooltip.variable=TODO\: SchemaHandlingStep.iteration.tooltip.variable
SchemaHandlingStep.limitations.tooltip.layers=System layers to which this limitation applies. Sometimes the limitation does not apply equally to all the layers. E.g. the attribute may be formally read-write but we want it to be only presented as read-only by the user interface and change it only through mappings. In such a case the read-only limitation applies only to "presentation" layer.
SchemaHandlingStep.limitations.tooltip.other=TODO\: REMOVE THIS TOOLTIP
SchemaHandlingStep.limitations.tooltip.propertyAccess=The type of access which is allowed or denied.
SchemaHandlingStep.message.validationError=Inserted objectClass value\: '{0}' is not valid. Please provide valid objectClass value.
SchemaHandlingStep.protected.tooltip.filter=TODO\: SchemaHandlingStep.protected.tooltip.filter
SchemaHandlingStep.protected.tooltip.name=TODO\: SchemaHandlingStep.protected.tooltip.name
SchemaHandlingStep.protected.tooltip.uid=TODO\: SchemaHandlingStep.protected.tooltip.uid
SchemaHandlingStep.tooltip.activation=Definition how to map activation states (enabled/disabled/archived) and dates (validity from and to).
SchemaHandlingStep.tooltip.assignmentPolicyRef=Assignment policy specifies how strictly are the assignments enforced. None\: the assignments are not enforced at all; Positive\: assignments only add values (never substract); Relative\: only changes are propagated, existing values are left as they are; Full\: everything is strictly enforced (both changed and existing values).
SchemaHandlingStep.tooltip.associations=Definitions how entitlement associations are to be handled.
SchemaHandlingStep.tooltip.attributes=Definitions how individual attributes are to be handled. Each definition may contain inbound/outbound mappings, attribute limitations, etc.
SchemaHandlingStep.tooltip.credentials=Definition how to handle credentials such as passwords.
SchemaHandlingStep.tooltip.default=If set to true then this definition is the default for its kind. I.e. if no intent is explicitly specified then this definition will be used.
SchemaHandlingStep.tooltip.dependency=Dependencies are object types that has to be processed before this object types is processed. I.e. this object type depends on them. The object types on which this object type depends will be provisioned before this object type. Dependencies are used to impose ordering into provisioning operations.
SchemaHandlingStep.tooltip.filterClause=TODO\: SchemaHandlingStep.tooltip.filterClause
SchemaHandlingStep.tooltip.intent=Intent specifies what midPoint should do with the object. Intent sorts objects of the same kind into several categories. Objects with different intents may be handled differently by midPoint.
SchemaHandlingStep.tooltip.iteration=Iteratively find values for unique attributes such as identifiers. MidPoint will try several times to find a unique value for such attributes. 
SchemaHandlingStep.tooltip.kind=Kind specified what this object is, whether it is account, entitlement or something else.
SchemaHandlingStep.tooltip.objectClass=Object class from the schema that will be used to construct instances of this object type.
SchemaHandlingStep.tooltip.protected=Specification of protected instances of this object type. MidPoint can see protected instances but they cannot be touched. Any attempt to modify them will fail. This is used to protect emergency administration accounts such as "root" or "administrator".
SchemaStep.tooltip.intent=Intent specifies what midPoint should do with the object. Intent sorts objects of the same kind into several categories. Objects with different intents may be handled differently by midPoint.
SchemaStep.tooltip.isDefault=If set to true then this definition is the default for its kind. I.e. if no intent is explicitly specified then this definition will be used.
SchemaStep.tooltip.kind=Kind specified what this object is, whether it is account, entitlement or something else.
SchemaStep.tooltip.nativeObjectClass=Object class name how it is natively known by the resource (or the connector).
SynchronizationStep.reaction.tooltip.action=Explicit action. This setting defines what midPoint has to do as a reaction to the synchronization event.
SynchronizationStep.reaction.tooltip.channel=Channel limitation. If the synchronization event originated from the specified channel (e.g. live sync, reconciliation or import) then this reaction will be processed. It will be ignored otherwise.
SynchronizationStep.reaction.tooltip.objectTemplateRef=Object template that will be used to process this specific synchronization event. If no object template is specified here then the usual default will be used.
SynchronizationStep.reaction.tooltip.reconcile=If set to true then the reconciliation step will be forced for this synchronization event. The attributes will be explicitly fetched is they are not present. If set to false then the reconciliation will be automatic. In that case the reconciliation happens only if the attributes are already present in the synchronization event. If the attributes are not present they will not be explicitly fetched and the reconciliation will be skipped.
SynchronizationStep.reaction.tooltip.situation=Synchronization situation. If the situation of the event matches the situation specified here then the reaction will be applied. It will be ignored otherwise.
SynchronizationStep.reaction.tooltip.synchronize=If set to true then the usual synchronization algorithms will be applied (a.k.a. clockwork and projector) in addition to explicit action specified below. This is the usual case. If set to false then the synchronization algorithms will be skipped and only the explicit action will be executed. 
SynchronizationStep.tooltip.condition=The synchronization setting will be applied only if this condition returns true. The condition is used mostly to sort the object of the same kind into intents. E.g. the condition may decide whether the username starts with "T". If is does then it can sort out accounts to intent "test" and if it does not then the account will have default intent.
SynchronizationStep.tooltip.confirmation=Confirmation expression. Each result of the correlation expression will be passed to confirmation expression. If the confirmation expression returns true then the objects will be linked. If no confirmation expression is specified then all the objects returned from the correlation query are accepted by default. Confirmation expression may be reasonable resource-intensive because it will be executed only for objects that are returned from the correlation query.
SynchronizationStep.tooltip.correlation=Correlation expression. The correlation expression is used to link focal objects (e.g. User) and shadows (e.g. account) that belong together. The correlation expression results in a search filter that is executed over the focal objects (usually users). The query returns candidate objects for linking. Correlation expression must be very efficient otherwise the synchronization performance will suffer.
SynchronizationStep.tooltip.enabled=Set to true if this synchronization setting is enabled. This is the default. This setting can be used to temporarily disable the synchronization setting.
SynchronizationStep.tooltip.focus=The type of focal object that corresponds to the resource object. For account objects this is usually a user object (UserType). This can be set to RoleType or OrgType for entitlement objects and so on. 
SynchronizationStep.tooltip.intent=Object intent for which this definition applies. If the object (shadow) already has a kind and intent when it is processed by the synchronization code then this kind/intent definition will be used to select the synchronization settings to apply to this object. If the object does not have kind/intent then object class and conditions will be used to select the settings. In such a case the object (shadow) will be marked by the intent specified in this field.
SynchronizationStep.tooltip.kind=Object kind for which this definition applies. If the object (shadow) already has a kind and intent when it is processed by the synchronization code then this kind/intent definition will be used to select the synchronization settings to apply to this object. If the object does not have kind/intent then object class and conditions will be used to select the settings. In such a case the object (shadow) will be marked by the kind specified in this field. 
SynchronizationStep.tooltip.objectClass=Object class for which this definition applies. This will be used to select the synchronization settings in case the object (shadow) does not have kind/intent definition yet.
SynchronizationStep.tooltip.objectTemplate=Object template that will be used to process this specific synchronization event. If no object template is specified here then the usual default will be used.
SynchronizationStep.tooltip.opportunistic=If set to true then opportunistic synchronization (a.k.a. discovery) will be enabled during the processing of this event.
SynchronizationStep.tooltip.reaction=Specifies how midPoint reacts to this synchronization event. Several reactions can be specified. The reaction appropriate for the synchronization situation of the event will be selected.
SynchronizationStep.tooltip.reconcile=If set to true then the reconciliation step will be forced for this synchronization event. The attributes will be explicitly fetched is they are not present. If set to false then the reconciliation will be automatic. In that case the reconciliation happens only if the attributes are already present in the synchronization event. If the attributes are not present they will not be explicitly fetched and the reconciliation will be skipped.
WizardStep.title=
